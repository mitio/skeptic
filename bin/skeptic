#!/usr/bin/env ruby
$LOAD_PATH.unshift File.dirname(__FILE__) + '/../lib'
require 'skeptic'
require 'trollop'

parser = Trollop::Parser.new do
  banner <<BANNER
Points out annoying things in your Ruby code. Just run with:

  skeptic [options] <path>

where
<path> is a path to a file or a directory\
(which would be checked recursively) and
[options] are:
BANNER
  Skeptic::Rules.table.each_rule do |klass, slug, option_type, description|
    opt slug, description, type: option_type
  end
  opt :path, 'Path to file/directory to analyze', type: :string
end

opts = Trollop::with_standard_exception_handling parser do
  parsed = parser.parse ARGV
  parsed[:path] ||= ARGV.shift unless parsed[:path_given]
  raise Trollop::HelpNeeded unless parsed[:path]
  raise Trollop::CommandlineError, "excessive arguments: #{ARGV.join(' ')}" unless ARGV.empty?
  raise Trollop::CommandlineError, "resource does not exist: #{parsed[:path]}" unless File.exist? parsed[:path]
  parsed
end

CRITIC_OPTS = opts.select { |key, value| Skeptic::Rules.table.slugs.include? key }

def criticize_file(path)
  code = File.read path
  critic = Skeptic::Critic.new CRITIC_OPTS
  critic.criticize code
  critic.criticism
end

def criticize_directory(path)
  Dir["#{path}/**/*.rb"].map do |file|
    [file, criticize_file(file)]
  end
end

def display_directory_criticism(criticism)
  has_errors = false
  criticism.each do |filename, file_criticism|
    unless file_criticism.empty?
      puts "#{filename} :\n\n"
      display_file_criticism file_criticism
      has_errors = true
    end
  end

  puts "#{criticism.count} files checked"
  has_errors
end

def display_file_criticism(criticism)
  messages = Hash.new { |hash, key| hash[key] = [] }
  criticism.each do |message, type|
    messages[type] << message
  end

  messages.each do |type, messages|
    puts type
    messages.each do |message|
      puts "* #{message}"
    end
    puts ""
  end
  !criticism.empty?
end

has_errors = if Dir.exist? opts[:path]
  display_directory_criticism criticize_directory opts[:path]
else
  display_file_criticism criticize_file opts[:path]
end

if has_errors
  puts 'Errors found'
  exit 1
else
  puts 'OK'
  exit 0
end


